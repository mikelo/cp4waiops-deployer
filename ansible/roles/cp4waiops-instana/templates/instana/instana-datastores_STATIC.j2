apiVersion: v1
kind: ServiceAccount
metadata:
  name: instana-datastore-sa
  namespace: instana-datastores
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: instana-datastore-anyuid
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:openshift:scc:anyuid
subjects:
- kind: ServiceAccount
  name: instana-datastore-sa
  namespace: instana-datastores
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: instana-datastore-privileged
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:openshift:scc:privileged
subjects:
- kind: ServiceAccount
  name: instana-datastore-sa
  namespace: instana-datastores
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: default-cassandra
  namespace: instana-datastores
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: default-cassandra
      app.kubernetes.io/name: instana
      app.kubernetes.io/part-of: datastores
      instana.io/group: datastore
  serviceName: default-cassandra
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-cassandra
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
      name: default-cassandra
      namespace: instana-datastores
    spec:
      serviceAccountName: instana-datastore-sa
      containers:
      - env:
        - name: TRUST_STORE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: trustStorePassword
              name: default-cassandra
        - name: JVM_OPTS
          value: -XX:InitialRAMPercentage=70.0 -XX:MaxRAMPercentage=70.0 -XshowSettings:VM -Dcassandra.allow_unsafe_aggressive_sstable_expiration=true
        - name: RCP_ADDRESS
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        image: containers.instana.io/instana/release/product/k8s/cassandra:4.0.7_v0.33.0
        imagePullPolicy: IfNotPresent
        name: cassandra
        ports:
        - containerPort: 9042
          name: tcp
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - /usr/local/bin/ready-probe.sh
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "2"
            memory: 8Gi
          requests:
            cpu: "1"
            memory: 4Gi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/cassandra
          name: data
        - mountPath: /etc/cassandra/cassandra-ro.yaml
          name: secret
          readOnly: true
          subPath: cassandra-ro.yaml
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      imagePullSecrets:
      - name: instana-registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 120
      volumes:
      - name: secret
        secret:
          defaultMode: 420
          secretName: default-cassandra
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-cassandra
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
      name: data
      namespace: instana-datastores
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi
      storageClassName: {{ WAIOPS_STORAGE_CLASS_FILE }}
      volumeMode: Filesystem
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: default-clickhouse
  namespace: instana-datastores
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: default-clickhouse
      app.kubernetes.io/name: instana
      app.kubernetes.io/part-of: datastores
      instana.io/group: datastore
  serviceName: default-clickhouse
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-clickhouse
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
      name: default-clickhouse
      namespace: instana-datastores
    spec:
      serviceAccountName: instana-datastore-sa
      containers:
      - image: containers.instana.io/instana/release/product/clickhouse:22.3.15.33_v0.76.0
        imagePullPolicy: IfNotPresent
        name: clickhouse
        ports:
        - containerPort: 9000
          name: tcp
          protocol: TCP
        - containerPort: 8123
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8123
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "2"
            memory: 8Gi
          requests:
            cpu: "1"
            memory: 4Gi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/clickhouse
          name: data
        - mountPath: /etc/clickhouse-server/config.d/instana_specific.xml
          name: secret
          readOnly: true
          subPath: instana_specific.xml
        - mountPath: /etc/clickhouse-server/users.d//user.xml
          name: secret
          readOnly: true
          subPath: user.xml
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      imagePullSecrets:
      - name: instana-registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: clickhouse-sa
      terminationGracePeriodSeconds: 120
      volumes:
      - name: secret
        secret:
          defaultMode: 420
          secretName: default-clickhouse
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-clickhouse
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
      name: data
      namespace: instana-datastores
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi
      storageClassName: {{ WAIOPS_STORAGE_CLASS_FILE }}
      volumeMode: Filesystem
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: default-clickhouse-zookeeper
  namespace: instana-datastores
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: default-clickhouse-zookeeper
      app.kubernetes.io/name: instana
      app.kubernetes.io/part-of: datastores
      instana.io/group: datastore
  serviceName: default-clickhouse-zookeeper
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-clickhouse-zookeeper
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
      name: default-clickhouse-zookeeper
      namespace: instana-datastores
    spec:
      serviceAccountName: instana-datastore-sa
      containers:
      - env:
        - name: JVMFLAGS
          value: -XX:InitialRAMPercentage=70.0 -XX:MaxRAMPercentage=70.0 -XshowSettings:VM -Dcom.redhat.fips=false
        image: containers.instana.io/instana/release/product/k8s/zookeeper:3.7.1_v0.20.0
        imagePullPolicy: IfNotPresent
        name: zookeeper
        ports:
        - containerPort: 2181
          name: tcp
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - zkServer.sh status | grep standalone
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "1"
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: data
          subPath: data
        - mountPath: /datalog
          name: data
          subPath: datalog
        - mountPath: /conf/zoo.cfg
          name: secret
          readOnly: true
          subPath: zoo.cfg
        - mountPath: /opt/kafka/config/log4j.properties
          name: secret
          readOnly: true
          subPath: log4j.properties
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      imagePullSecrets:
      - name: instana-registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 120
      volumes:
      - name: secret
        secret:
          defaultMode: 420
          secretName: default-clickhouse-zookeeper
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-clickhouse-zookeeper
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
      name: data
      namespace: instana-datastores
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi
      storageClassName: {{ WAIOPS_STORAGE_CLASS_FILE }}
      volumeMode: Filesystem
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: default-elasticsearch
  namespace: instana-datastores
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: default-elasticsearch
      app.kubernetes.io/name: instana
      app.kubernetes.io/part-of: datastores
      instana.io/group: datastore
  serviceName: default-elasticsearch
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-elasticsearch
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
      name: default-elasticsearch
      namespace: instana-datastores
    spec:
      serviceAccountName: instana-datastore-sa
      containers:
      - env:
        - name: DEFAULT_HEAP_OPTS
          value: -XX:InitialRAMPercentage=70.0 -XX:MaxRAMPercentage=70.0 -XshowSettings:VM
        - name: KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: keystorePassword
              name: default-elasticsearch
        - name: TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: truststorePassword
              name: default-elasticsearch
        image: containers.instana.io/instana/release/product/k8s/elasticsearch:7.16.3_v0.21.0
        imagePullPolicy: IfNotPresent
        name: elasticsearch
        ports:
        - containerPort: 9300
          name: tcp
          protocol: TCP
        - containerPort: 9200
          name: http
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - /usr/share/elasticsearch/bin/ready-probe.sh
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "2"
            memory: 8Gi
          requests:
            cpu: "1"
            memory: 4Gi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: data
          subPath: data
        - mountPath: /usr/share/elasticsearch/logs
          name: data
          subPath: logs
        - mountPath: /usr/share/elasticsearch/plugins
          name: data
          subPath: plugins
        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          name: secret
          readOnly: true
          subPath: elasticsearch.yml
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      imagePullSecrets:
      - name: instana-registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 120
      volumes:
      - name: secret
        secret:
          defaultMode: 420
          secretName: default-elasticsearch
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-elasticsearch
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
      name: data
      namespace: instana-datastores
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi
      storageClassName: {{ WAIOPS_STORAGE_CLASS_FILE }}
      volumeMode: Filesystem
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: default-kafka
  namespace: instana-datastores
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: default-kafka
      app.kubernetes.io/name: instana
      app.kubernetes.io/part-of: datastores
      instana.io/group: datastore
  serviceName: default-kafka
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-kafka
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
      name: default-kafka
      namespace: instana-datastores
    spec:
      serviceAccountName: instana-datastore-sa
      containers:
      - command:
        - /bin/bash
        - -c
        - kafka-server-start.sh /opt/kafka/config/server.properties --override advertised.listeners=PLAINTEXT://$(KAFKA_POD_IP):9092
        env:
        - name: KAFKA_HEAP_OPTS
          value: -XX:InitialRAMPercentage=70.0 -XX:MaxRAMPercentage=70.0 -XshowSettings:VM
        - name: KAFKA_OPTS
          value: -Dcom.redhat.fips=false
        - name: KAFKA_POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: LISTEN_ADDR
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: KAFKA_JVM_PERFORMANCE_OPTS
          value: -server -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:G1HeapRegionSize=16M -XX:MaxGCPauseMillis=20 -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -Djava.awt.headless=true
        image: containers.instana.io/instana/release/product/k8s/kafka:3.2.0_v0.21.0
        imagePullPolicy: IfNotPresent
        name: kafka
        ports:
        - containerPort: 9092
          name: tcp
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - /opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/kafka/data
          name: data
          subPath: data
        - mountPath: /opt/kafka/config/server.properties
          name: secret
          readOnly: true
          subPath: server.properties
        - mountPath: /opt/kafka/config/log4j.properties
          name: secret
          readOnly: true
          subPath: log4j.properties
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      imagePullSecrets:
      - name: instana-registry
      initContainers:
      - command:
        - sh
        - -c
        - echo "Waiting for default-kafka-zookeeper to become ready...";until printf "." && nc -z -w 2 default-kafka-zookeeper:2181; do sleep 2; done; echo "default-kafka-zookeeper is ready.";
        image: docker.io/busybox:1.34
        imagePullPolicy: IfNotPresent
        name: zkchecker
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 120
      volumes:
      - name: secret
        secret:
          defaultMode: 420
          secretName: default-kafka
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-kafka
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
      name: data
      namespace: instana-datastores
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi
      storageClassName: {{ WAIOPS_STORAGE_CLASS_FILE }}
      volumeMode: Filesystem
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: default-kafka-zookeeper
  namespace: instana-datastores
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: default-kafka-zookeeper
      app.kubernetes.io/name: instana
      app.kubernetes.io/part-of: datastores
      instana.io/group: datastore
  serviceName: default-kafka-zookeeper
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-kafka-zookeeper
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
      name: default-kafka-zookeeper
      namespace: instana-datastores
    spec:
      serviceAccountName: instana-datastore-sa
      containers:
      - env:
        - name: JVMFLAGS
          value: -XX:InitialRAMPercentage=70.0 -XX:MaxRAMPercentage=70.0 -XshowSettings:VM -Dcom.redhat.fips=false
        image: containers.instana.io/instana/release/product/k8s/zookeeper:3.7.1_v0.20.0
        imagePullPolicy: IfNotPresent
        name: zookeeper
        ports:
        - containerPort: 2181
          name: tcp
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - zkServer.sh status | grep standalone
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "1"
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: data
          subPath: data
        - mountPath: /datalog
          name: data
          subPath: datalog
        - mountPath: /conf/zoo.cfg
          name: secret
          readOnly: true
          subPath: zoo.cfg
        - mountPath: /opt/kafka/config/log4j.properties
          name: secret
          readOnly: true
          subPath: log4j.properties
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      imagePullSecrets:
      - name: instana-registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 120
      volumes:
      - name: secret
        secret:
          defaultMode: 420
          secretName: default-kafka-zookeeper
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-kafka-zookeeper
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
      name: data
      namespace: instana-datastores
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi
      storageClassName: {{ WAIOPS_STORAGE_CLASS_FILE }}
      volumeMode: Filesystem
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: default-postgres
  namespace: instana-datastores
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: default-postgres
      app.kubernetes.io/name: instana
      app.kubernetes.io/part-of: datastores
      instana.io/group: datastore
  serviceName: default-postgres
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-postgres
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
      name: default-postgres
      namespace: instana-datastores
    spec:
      serviceAccountName: instana-datastore-sa
      containers:
      - env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              key: adminUser
              name: default-postgres
        - name: POSTGRES_HOST_AUTH_METHOD
          value: trust
        image: containers.instana.io/instana/release/product/k8s/postgres:14.3_v0.25.0
        imagePullPolicy: IfNotPresent
        name: postgres
        ports:
        - containerPort: 5432
          name: tcp
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready --username=$POSTGRES_USER --host=127.0.0.1 --port=5432
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/postgresql
          name: data
          subPath: run
        - mountPath: /var/lib/postgresql
          name: data
          subPath: lib
        - mountPath: /etc/postgres/postgresql.conf
          name: secret
          readOnly: true
          subPath: postgresql.conf
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      imagePullSecrets:
      - name: instana-registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 120
      volumes:
      - name: secret
        secret:
          defaultMode: 420
          secretName: default-postgres
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-postgres
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
      name: data
      namespace: instana-datastores
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi
      storageClassName: {{ WAIOPS_STORAGE_CLASS_FILE }}
      volumeMode: Filesystem
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: default-cockroachdb
  namespace: instana-datastores
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: default-cockroachdb
      app.kubernetes.io/name: instana
      app.kubernetes.io/part-of: datastores
      instana.io/group: datastore
  template:
    metadata:
      name: default-cockroachdb
      namespace: instana-datastores
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-cockroachdb
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: instana-registry
      schedulerName: default-scheduler
      enableServiceLinks: false
      terminationGracePeriodSeconds: 120
      securityContext: {}
      serviceAccountName: instana-datastore-sa
      containers:
        - resources:
            limits:
              cpu: '8'
              memory: 16Gi
            requests:
              cpu: '512m'
              memory: 1Gi
          readinessProbe:
            httpGet:
              path: /
              port: 8123
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          stdin: true
          terminationMessagePath: /dev/termination-log
          name: cockroachdb
          ports:
            - containerPort: 26257
          env:
            - name: LISTEN_ADDR
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP          
          imagePullPolicy: IfNotPresent

          terminationMessagePolicy: File
          image: >-
            containers.instana.io/instana/release/product/cockroachdb:21.1.7_v0.36.0
          securityContext:
            runAsUser: 0
          volumeMounts:
            - mountPath: /mnt/data
              name: cockroach-data
            - mountPath: /mnt/logs
              name: cockroach-logs
      volumes:
        - name: cockroach-data
          persistentVolumeClaim:
            claimName: cockroach-data
        - name: cockroach-logs
          persistentVolumeClaim:
            claimName: cockroach-logs
      dnsPolicy: ClusterFirst
  volumeClaimTemplates:
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: cockroach-data
        namespace: instana-datastores
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-cockroachdb
          app.kubernetes.io/name: instana
          app.kubernetes.io/part-of: datastores
          instana.io/group: datastore
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 200Gi
        storageClassName: ocs-storagecluster-cephfs
        volumeMode: Filesystem
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: cockroach-logs
        namespace: instana-datastores
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-cockroachdb
          app.kubernetes.io/name: instana
          app.kubernetes.io/part-of: datastores
          instana.io/group: datastore
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 200Gi
        storageClassName: ocs-storagecluster-cephfs
        volumeMode: Filesystem
  serviceName: default-cockroachdb
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  revisionHistoryLimit: 10
---
apiVersion: v1
kind: Service
metadata:
  name: default-cassandra
  namespace: instana-datastores
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: tcp
    port: 9042
    protocol: TCP
    targetPort: tcp
  selector:
    app.kubernetes.io/component: default-cassandra
    app.kubernetes.io/name: instana
    app.kubernetes.io/part-of: datastores
    instana.io/group: datastore
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: default-clickhouse
  namespace: instana-datastores
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: tcp
    port: 9000
    protocol: TCP
    targetPort: tcp
  - name: http
    port: 8123
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/component: default-clickhouse
    app.kubernetes.io/name: instana
    app.kubernetes.io/part-of: datastores
    instana.io/group: datastore
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: default-clickhouse-zookeeper
  namespace: instana-datastores
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: tcp
    port: 2181
    protocol: TCP
    targetPort: tcp
  selector:
    app.kubernetes.io/component: default-clickhouse-zookeeper
    app.kubernetes.io/name: instana
    app.kubernetes.io/part-of: datastores
    instana.io/group: datastore
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: default-elasticsearch
  namespace: instana-datastores
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: tcp
    port: 9300
    protocol: TCP
    targetPort: tcp
  - name: http
    port: 9200
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/component: default-elasticsearch
    app.kubernetes.io/name: instana
    app.kubernetes.io/part-of: datastores
    instana.io/group: datastore
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: default-kafka
  namespace: instana-datastores
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: tcp
    port: 9092
    protocol: TCP
    targetPort: tcp
  selector:
    app.kubernetes.io/component: default-kafka
    app.kubernetes.io/name: instana
    app.kubernetes.io/part-of: datastores
    instana.io/group: datastore
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: default-kafka-zookeeper
  namespace: instana-datastores
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: tcp
    port: 2181
    protocol: TCP
    targetPort: tcp
  selector:
    app.kubernetes.io/component: default-kafka-zookeeper
    app.kubernetes.io/name: instana
    app.kubernetes.io/part-of: datastores
    instana.io/group: datastore
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: default-postgres
  namespace: instana-datastores
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: tcp
    port: 5432
    protocol: TCP
    targetPort: tcp
  selector:
    app.kubernetes.io/component: default-postgres
    app.kubernetes.io/name: instana
    app.kubernetes.io/part-of: datastores
    instana.io/group: datastore
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
kind: Service
apiVersion: v1
metadata:
  name: cockroachdb-service
spec:
  selector:
    app: cockroachdb
  ports:
    - protocol: TCP
      port: 26257
      targetPort: 26257
  type: ClusterIP


apiVersion: v1
kind: Service
metadata:
  name: default-cockroachdb
  namespace: instana-datastores
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - protocol: TCP
      port: 26257
      targetPort: 26257
  selector:
    app.kubernetes.io/component: default-cockroachdb
    app.kubernetes.io/name: instana
    app.kubernetes.io/part-of: datastores
    instana.io/group: datastore
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}

